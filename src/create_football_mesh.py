import numpy as np
from typing import Tuple, List

def create_icosahedron() -> Tuple[np.ndarray, np.ndarray]:
    """创建二十面体的基础网格"""
    # 黄金比例
    phi = (1 + np.sqrt(5)) / 2
    
    # 定义12个顶点
    vertices = np.array([
        [-1, phi, 0], [1, phi, 0], [-1, -phi, 0], [1, -phi, 0],
        [0, -1, phi], [0, 1, phi], [0, -1, -phi], [0, 1, -phi],
        [phi, 0, -1], [phi, 0, 1], [-phi, 0, -1], [-phi, 0, 1]
    ], dtype=np.float32)
    
    # 归一化顶点到单位球面
    vertices /= np.linalg.norm(vertices[0])
    
    # 定义20个三角形面
    faces = np.array([
        [0, 11, 5], [0, 5, 1], [0, 1, 7], [0, 7, 10], [0, 10, 11],
        [1, 5, 9], [5, 11, 4], [11, 10, 2], [10, 7, 6], [7, 1, 8],
        [3, 9, 4], [3, 4, 2], [3, 2, 6], [3, 6, 8], [3, 8, 9],
        [4, 9, 5], [2, 4, 11], [6, 2, 10], [8, 6, 7], [9, 8, 1]
    ], dtype=np.int32)
    
    return vertices, faces

def subdivide_mesh(vertices: np.ndarray, faces: np.ndarray) -> Tuple[np.ndarray, np.ndarray]:
    """细分网格，将每个三角形分成四个小三角形"""
    # 存储新的顶点和面
    new_vertices = []
    new_faces = []
    edge_midpoints = {}
    
    # 将现有顶点添加到新顶点列表
    for vertex in vertices:
        new_vertices.append(vertex)
    
    def get_edge_midpoint(p1: int, p2: int) -> int:
        """获取边的中点索引，如果不存在则创建新的中点"""
        edge = tuple(sorted([p1, p2]))
        if edge in edge_midpoints:
            return edge_midpoints[edge]
        
        # 计算新的顶点位置
        midpoint = (vertices[p1] + vertices[p2]) / 2.0
        # 归一化到球面
        midpoint /= np.linalg.norm(midpoint)
        
        new_vertices.append(midpoint)
        edge_midpoints[edge] = len(new_vertices) - 1
        return edge_midpoints[edge]
    
    # 处理每个面
    for face in faces:
        v1, v2, v3 = face
        
        # 获取每条边的中点
        a = get_edge_midpoint(v1, v2)
        b = get_edge_midpoint(v2, v3)
        c = get_edge_midpoint(v3, v1)
        
        # 创建四个新的三角形
        new_faces.extend([
            [v1, a, c],
            [v2, b, a],
            [v3, c, b],
            [a, b, c]
        ])
    
    return np.array(new_vertices), np.array(new_faces)

def create_football_mesh(radius: float = 100.0, subdivisions: int = 2) -> Tuple[np.ndarray, np.ndarray, np.ndarray]:
    """创建足球形状的三角形网格
    
    Args:
        radius: 球体半径
        subdivisions: 细分次数，建议2-4之间
        
    Returns:
        vertices: 顶点坐标数组
        faces: 面片索引数组
        normals: 顶点法向量数组
    """
    # 创建基础二十面体
    vertices, faces = create_icosahedron()
    
    # 进行指定次数的细分
    for _ in range(subdivisions):
        vertices, faces = subdivide_mesh(vertices, faces)
    
    # 缩放到指定半径
    vertices *= radius
    
    # 计算顶点法向量（对于球体，法向量就是归一化的顶点坐标）
    normals = vertices / radius
    
    return vertices, faces, normals

def save_to_stl(filename: str, vertices: np.ndarray, faces: np.ndarray, normals: np.ndarray):
    """将网格保存为二进制STL文件
    
    Args:
        filename: 输出文件名
        vertices: 顶点坐标数组
        faces: 面片索引数组
        normals: 顶点法向量数组
    """
    # 计算面片法向量（使用顶点的平均法向量）
    face_normals = np.zeros((len(faces), 3))
    for i, face in enumerate(faces):
        face_normals[i] = np.mean(normals[face], axis=0)
        face_normals[i] /= np.linalg.norm(face_normals[i])
    
    # 写入STL文件
    with open(filename, 'wb') as f:
        # 写入文件头（80字节）
        header = b'Binary STL file of football mesh generated by create_football_mesh.py'
        f.write(header.ljust(80, b' '))
        
        # 写入三角形数量（4字节）
        f.write(np.uint32(len(faces)))
        
        # 为每个三角形写入数据
        for i, face in enumerate(faces):
            # 法向量（12字节）
            f.write(face_normals[i].astype(np.float32))
            # 三个顶点（36字节）
            for vertex_idx in face:
                f.write(vertices[vertex_idx].astype(np.float32))
            # 属性字节计数（2字节）
            f.write(np.uint16(0))

if __name__ == '__main__':
    # 创建输出目录
    import os
    os.makedirs('data', exist_ok=True)
    
    # 生成网格
    output_file = 'data/football.stl'
    vertices, faces, normals = create_football_mesh(radius=100.0, subdivisions=3)
    
    # 保存为STL文件
    save_to_stl(output_file, vertices, faces, normals)
    
    print(f'已生成足球网格：{output_file}')
    print(f'网格信息：')
    print(f'- 顶点数量：{len(vertices)}')
    print(f'- 面片数量：{len(faces)}')